{"code":"import { __decorate } from \"tslib\";\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/camelcase */\r\nimport { LitElement, html, css } from 'lit';\r\nimport { fireEvent } from 'custom-card-helpers';\r\nimport { customElement, property, state } from 'lit/decorators';\r\nimport { assert, object, optional, string, assign, any, boolean } from \"superstruct\";\r\nimport { remoteConfigSchema } from './schema';\r\nexport const baseLovelaceCardConfig = object({\r\n    type: string(),\r\n    view_layout: any(),\r\n});\r\nconst cardConfigStruct = assign(baseLovelaceCardConfig, object({\r\n    name: optional(string()),\r\n    entity: optional(string()),\r\n    mac: optional(string()),\r\n    show_name: optional(boolean()),\r\n    show_state: optional(boolean()),\r\n    show_preview: optional(boolean()),\r\n    icon: optional(string()),\r\n}));\r\nlet BoilerplateCardEditor = class BoilerplateCardEditor extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._initialized = false;\r\n    }\r\n    setConfig(config) {\r\n        assert(config, cardConfigStruct);\r\n        this._config = config;\r\n        this.loadCardHelpers();\r\n    }\r\n    shouldUpdate() {\r\n        var _a;\r\n        if (!this._initialized) {\r\n            this._initialize();\r\n        }\r\n        this.icon = (_a = this._config) === null || _a === void 0 ? void 0 : _a.icon;\r\n        return true;\r\n    }\r\n    get _name() {\r\n        var _a;\r\n        return ((_a = this._config) === null || _a === void 0 ? void 0 : _a.name) || '';\r\n    }\r\n    get _entity() {\r\n        var _a;\r\n        return ((_a = this._config) === null || _a === void 0 ? void 0 : _a.entity) || '';\r\n    }\r\n    get _mac() {\r\n        var _a;\r\n        return ((_a = this._config) === null || _a === void 0 ? void 0 : _a.mac) || '';\r\n    }\r\n    get _show_warning() {\r\n        var _a;\r\n        return ((_a = this._config) === null || _a === void 0 ? void 0 : _a.show_warning) || false;\r\n    }\r\n    get _show_error() {\r\n        var _a;\r\n        return ((_a = this._config) === null || _a === void 0 ? void 0 : _a.show_error) || false;\r\n    }\r\n    render() {\r\n        if (!this.hass || !this._helpers) {\r\n            return html ``;\r\n        }\r\n        this._helpers.importMoreInfoControl('climate');\r\n        return html `\n      <ha-form\n        .hass=${this.hass}\n        .schema=${remoteConfigSchema}\n        .computeLabel=${this._computeLabel}\n        .data = ${this._config}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\r\n    }\r\n    _initialize() {\r\n        if (this.hass === undefined)\r\n            return;\r\n        if (this._config === undefined)\r\n            return;\r\n        if (this._helpers === undefined)\r\n            return;\r\n        this._initialized = true;\r\n    }\r\n    async loadCardHelpers() {\r\n        this._helpers = await window.loadCardHelpers();\r\n    }\r\n    _computeLabel(schema) {\r\n        return this.hass.localize(`ui.panel.lovelace.editor.card.generic.${schema.name}`);\r\n    }\r\n    _valueChanged(ev) {\r\n        if (!this._config || !this.hass) {\r\n            return;\r\n        }\r\n        const config = ev.detail.value;\r\n        fireEvent(this, \"config-changed\", { config });\r\n    }\r\n    static get styles() {\r\n        return css `\n      ha-card{\n        width: 20%;\n        height: 70px;\n        background-color: var(--ha-card-background);\n        border: 2px solid var(--divider-color);\n        cursor: pointer;\n        display: flex;\n        justify-content: center;\n        margin: 10px;\n      }\n\n      #container {\n        height: 100%;\n        width: 75%;\n      }\n      #containerMin {\n        width: 30%;\n        height: 100%;\n      }\n      @media only screen and (max-width: 600px) {\n        ha-card{\n          width: 30%;\n          height: 70px;\n          background-color: var(--ha-card-background);\n          border: 2px solid var(--divider-color);\n          cursor: pointer;\n          display: flex;\n          justify-content: center;\n        }\n        #containerMin {\n          width: 50%;\n          height: 100%;\n        }\n      }\n      ha-card.icon-card.on{\n        color: var(--accent-color);\n        box-shadow: 0px 0px 5px var(--accent-color) , 0px 0px 5px var(--accent-color);\n      }\n      .svg-icon.off {\n        fill: var(--paper-item-icon-color);\n      }\n      .svg-icon.on {\n        fill: var(--accent-color);\n      }\n      #picker {\n        margin-top: 50px;\n        font-size: 1.0rem;\n        font-weight: 450;\n      }\n      #icons {\n        margin-top: 20px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      .option {\n        padding: 3% 0%;\n        cursor: pointer;\n      }\n      .row {\n        display: flex;\n        margin-bottom: -14px;\n        pointer-events: none;\n      }\n      .title {\n        padding-left: 16px;\n        margin-top: -6px;\n        pointer-events: none;\n      }\n      .secondary {\n        padding-left: 40px;\n        color: var(--secondary-text-color);\n        pointer-events: none;\n      }\n      .values {\n        padding-left: 16px;\n        background: var(--secondary-background-color);\n        display: grid;\n      }\n\n      ha-formfield {\n        padding: 0px 10px 0px 20px;\n        max-width: 211px;\n      }\n    `;\r\n    }\r\n};\r\n__decorate([\r\n    property({ attribute: false })\r\n], BoilerplateCardEditor.prototype, \"hass\", void 0);\r\n__decorate([\r\n    state()\r\n], BoilerplateCardEditor.prototype, \"_config\", void 0);\r\n__decorate([\r\n    state()\r\n], BoilerplateCardEditor.prototype, \"_toggle\", void 0);\r\n__decorate([\r\n    state()\r\n], BoilerplateCardEditor.prototype, \"_helpers\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], BoilerplateCardEditor.prototype, \"icon\", void 0);\r\nBoilerplateCardEditor = __decorate([\r\n    customElement('lg-remote-card-editor')\r\n], BoilerplateCardEditor);\r\nexport { BoilerplateCardEditor };\r\n","references":["/workspaces/lg_remote/node_modules/lit/index.d.ts","/workspaces/lg_remote/node_modules/custom-card-helpers/dist/index.d.ts","/workspaces/lg_remote/node_modules/lit/decorators.d.ts","/workspaces/lg_remote/node_modules/superstruct/lib/index.d.ts","/workspaces/lg_remote/src/types.ts","/workspaces/lg_remote/src/schema.ts"]}
