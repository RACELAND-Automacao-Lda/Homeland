{"code":"import { __decorate } from \"tslib\";\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { LitElement, html, css, } from 'lit';\r\nimport { classMap } from \"lit/directives/class-map\";\r\nimport { customElement, eventOptions, property, queryAsync, state } from \"lit/decorators\";\r\nimport { hasConfigOrEntityChanged, getLovelace, } from 'custom-card-helpers';\r\nimport './editor';\r\nimport { CARD_VERSION, mdiIcon } from './const';\r\nimport { localize } from './localize/localize';\r\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers';\r\nimport { showLGDialog } from './show-more-info-dialog';\r\nimport { findEntities } from './find-entities';\r\n/* eslint no-console: 0 */\r\nconsole.info(`%c  REMOTE-CARD \\n%c  ${localize('common.version')} ${CARD_VERSION}    `, 'color: orange; font-weight: bold; background: black', 'color: white; font-weight: bold; background: dimgray');\r\nwindow.customCards = window.customCards || [];\r\nwindow.customCards.push({\r\n    type: 'lg-remote-card',\r\n    name: localize('info.card_name'),\r\n    description: localize('info.description'),\r\n    preview: true,\r\n});\r\n// declare global {\r\n//   // for fire event\r\n//   interface HASSDomEvents {\r\n//     \"add-remote\": { broadlinkInfo: RemoteCardConfig , all_devices: any, index: any};\r\n//   }\r\n// }\r\nlet RemoteCard = class RemoteCard extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.learningOn = false;\r\n        this.quickLearning = false;\r\n        this.learningLock = false;\r\n        this.buttonBeingLearned = \"none\";\r\n        this._shouldRenderRipple = false;\r\n        this.layout = \"big\";\r\n        this._rippleHandlers = new RippleHandlers(() => {\r\n            this._shouldRenderRipple = true;\r\n            return this._ripple;\r\n        });\r\n    }\r\n    static async getConfigElement() {\r\n        return document.createElement('lg-remote-card-editor');\r\n    }\r\n    static getStubConfig(hass, entities, entitiesFallback) {\r\n        const includeDomains = [\"switch\"];\r\n        const maxEntities = 1;\r\n        const foundEntities = findEntities(hass, maxEntities, entities, entitiesFallback, includeDomains);\r\n        return {\r\n            type: \"custom:lg-remote-card\",\r\n            entity: foundEntities[0] || \"\",\r\n            mac: \"\",\r\n            \"show_name\": true,\r\n            \"show_state\": true,\r\n            \"show_preview\": true,\r\n            \"icon\": mdiIcon,\r\n        };\r\n    }\r\n    setConfig(config) {\r\n        if (!config) {\r\n            throw new Error(localize('common.invalid_configuration'));\r\n        }\r\n        if (config.test_gui) {\r\n            getLovelace().setEditMode(true);\r\n        }\r\n        this.config = Object.assign(Object.assign({}, config), { preset: String(config.preset) });\r\n    }\r\n    shouldUpdate(changedProps) {\r\n        if (!this.config) {\r\n            return false;\r\n        }\r\n        return hasConfigOrEntityChanged(this, changedProps, true);\r\n    }\r\n    render() {\r\n        this.stateObj = this.hass.states[this.config.entity];\r\n        if (this.config.show_warning) {\r\n            return this._showWarning(localize('common.show_warning'));\r\n        }\r\n        if (this.config.show_error) {\r\n            return this._showError(localize('common.show_error'));\r\n        }\r\n        return html `\n     <ha-card\n      class=${classMap({\r\n            \"big-card\": this.layout === \"big\",\r\n            \"small-card\": this.layout === \"small\",\r\n            \"medium-card\": this.layout === \"medium\",\r\n            // \"unavailable\": UNAVAILABLE_STATES.includes(this.stateObj?.state)\r\n        })}\n        @focus=${this.handleRippleFocus}\n        @blur=${this.handleRippleBlur}\n        @mousedown=${this.handleRippleActivate}\n        @mouseup=${this.handleRippleDeactivate}\n        @touchstart=${this.handleRippleActivate}\n        @touchend=${this.handleRippleDeactivate}\n        @touchcancel=${this.handleRippleDeactivate}\n        @click=${this._showDialog}\n        role=\"button\"\n\n      >\n        <ha-state-icon class=${classMap({\r\n            \"ha-status-icon-big\": this.layout === \"big\",\r\n            \"ha-status-icon-small\": this.layout === \"medium\" || this.layout === \"small\",\r\n        })} .icon=${\"remote-tv\"} >\n        </ha-state-icon>\n          <span class=${classMap({\r\n            \"rect-card\": this.layout === \"big\",\r\n            \"rect-card-small\": this.layout === \"small\",\r\n            \"rect-card-medium\": this.layout === \"medium\"\r\n        })} tabindex=\"-1\" .title=${this.config.name ? this.config.name : \"\"}\n              >${this.config.name ? this.config.name : \"\"}</span\n            >\n        ${this._shouldRenderRipple ? html `<mwc-ripple></mwc-ripple>` : \"\"}\n        ${false\r\n            ? html ` <unavailable-icon></unavailable-icon>`\r\n            : html ``}\n      </ha-card>\n    `;\r\n    }\r\n    _showDialog() {\r\n        showLGDialog(this, { lgInfo: this.config, obj: this.stateObj });\r\n    }\r\n    handleRippleActivate(evt) {\r\n        this._rippleHandlers.startPress(evt);\r\n    }\r\n    handleRippleDeactivate() {\r\n        this._rippleHandlers.endPress();\r\n    }\r\n    handleRippleFocus() {\r\n        this._rippleHandlers.startFocus();\r\n    }\r\n    handleRippleBlur() {\r\n        this._rippleHandlers.endFocus();\r\n    }\r\n    _showWarning(error_message) {\r\n        return html `\n      <hui-warning>${error_message}</hui-warning>\n    `;\r\n    }\r\n    _showError(error) {\r\n        const errorCard = document.createElement('hui-error-card');\r\n        errorCard.setConfig({\r\n            type: 'error',\r\n            error,\r\n            origConfig: this.config,\r\n        });\r\n        return html `\n      ${errorCard}\n    `;\r\n    }\r\n    static get styles() {\r\n        return css `\n      .small-card {\n        cursor: pointer;\n        display: flex;\n        flex-direction: column;\n        align-items: left;\n        text-align: left;\n        padding: 4% 0;\n        font-size: 1.2rem;\n        height: 100%;\n        box-sizing: border-box;\n        justify-content: center;\n        position: relative;\n        overflow: hidden;\n        border-radius: 1.5rem;\n        font-weight: 450;\n        /* aspect-ratio: 1; */\n      }\n      .medium-card {\n        cursor: pointer;\n        display: flex;\n        flex-direction: column;\n        align-items: left;\n        text-align: left;\n        padding: 4% 0;\n        font-size: 1.8rem;\n        height: 100%;\n        box-sizing: border-box;\n        justify-content: center;\n        position: relative;\n        overflow: hidden;\n        border-radius: 1.5rem;\n        font-weight: 450;\n        /* aspect-ratio: 1; */\n      }\n      .big-card {\n        cursor: pointer;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        text-align: center;\n        padding: 4% 0;\n        font-size: 2.3rem;\n        height: 100%;\n        box-sizing: border-box;\n        justify-content: center;\n        position: relative;\n        overflow: hidden;\n        border-radius: 1.5rem;\n        font-weight: 450;\n      }\n      .unavailable {\n        pointer-events: none;\n      }\n      unavailable-icon {\n        position: absolute;\n        top: 11px;\n        right: 10%;\n      }\n      .rect-card-small {\n        padding: 5%;\n        padding-bottom: 4%;\n        margin-bottom: 4%;\n        margin-left: 7%;\n        white-space: nowrap;\n        display: inline-block;\n        overflow: hidden;\n        max-width: 110px;\n        text-overflow: ellipsis;\n      }\n\n      .rect-card-medium {\n        padding: 5%;\n        padding-bottom: 4%;\n        margin-bottom: 4%;\n        margin-left: 7%;\n        white-space: nowrap;\n        display: inline-block;\n        overflow: hidden;\n        max-width: 200px;\n        text-overflow: ellipsis;\n      }\n\n      .rect-card {\n        padding: 5%;\n        white-space: nowrap;\n        overflow: hidden;\n        max-width: 350px;\n        text-overflow: ellipsis;\n      }\n\n      ha-card:focus {\n        outline: none;\n      }\n\n      .ha-status-icon-big {\n        width: 40%;\n        height: auto;\n        color: var(--paper-item-icon-color, #7b7b7b);\n        --mdc-icon-size: 100%;\n      }\n\n      .ha-status-icon-small {\n        width: 63%;\n        margin-left: 5%;\n        height: auto;\n        color: var(--paper-item-icon-color, #7b7b7b);\n        --mdc-icon-size: 100%;\n      }\n      .svg-icon {\n        fill: var(--paper-item-icon-color, #44739e);\n      }\n\n      ha-state-icon,\n      span {\n        outline: none;\n      }\n      unavailable-icon {\n        position: absolute;\n        top: 11px;\n        right: 10%;\n      }\n      .state {\n        font-size: 0.9rem;\n        color: var(--secondary-text-color);\n      }\n    `;\r\n    }\r\n};\r\n__decorate([\r\n    property({ attribute: false })\r\n], RemoteCard.prototype, \"hass\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], RemoteCard.prototype, \"learningOn\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], RemoteCard.prototype, \"quickLearning\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], RemoteCard.prototype, \"learningLock\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], RemoteCard.prototype, \"stateObj\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], RemoteCard.prototype, \"buttonBeingLearned\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], RemoteCard.prototype, \"config\", void 0);\r\n__decorate([\r\n    state()\r\n], RemoteCard.prototype, \"_shouldRenderRipple\", void 0);\r\n__decorate([\r\n    queryAsync(\"mwc-ripple\")\r\n], RemoteCard.prototype, \"_ripple\", void 0);\r\n__decorate([\r\n    property({ type: String })\r\n], RemoteCard.prototype, \"layout\", void 0);\r\n__decorate([\r\n    eventOptions({ passive: true })\r\n], RemoteCard.prototype, \"handleRippleActivate\", null);\r\nRemoteCard = __decorate([\r\n    customElement('lg-remote-card')\r\n], RemoteCard);\r\nexport { RemoteCard };\r\n","references":["/workspaces/lg_remote/node_modules/lit/index.d.ts","/workspaces/lg_remote/node_modules/lit/directives/class-map.d.ts","/workspaces/lg_remote/node_modules/lit/decorators.d.ts","/workspaces/lg_remote/node_modules/custom-card-helpers/dist/index.d.ts","/workspaces/lg_remote/src/helpers.ts","/workspaces/lg_remote/src/editor.ts","/workspaces/lg_remote/src/types.ts","/workspaces/lg_remote/src/const.ts","/workspaces/lg_remote/src/localize/localize.ts","/workspaces/lg_remote/node_modules/@material/mwc-ripple/ripple-handlers.d.ts","/workspaces/lg_remote/node_modules/@material/mwc-ripple/mwc-ripple.d.ts","/workspaces/lg_remote/src/show-more-info-dialog.ts","/workspaces/lg_remote/src/find-entities.ts","/workspaces/lg_remote/node_modules/home-assistant-js-websocket/dist/index.d.ts"]}
